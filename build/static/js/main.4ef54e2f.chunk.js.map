{"version":3,"sources":["RealmApp.js","components/Card.js","components/Loading.js","components/LoginScreen.js","graphql/useTaskMutations.js","graphql/useTasks.js","components/StatusBadge.js","components/TaskContent.js","components/ButtonGroup.js","components/StatusChange.js","components/useChangeTaskStatusButton.js","components/TaskDetailModal.js","components/EditPermissionsModal.js","components/ProjectScreen.js","components/Sidebar.js","graphql/useProjects.js","TaskApp.js","graphql/RealmApolloProvider.js","App.js","serviceWorker.js","index.js"],"names":["RealmAppContext","React","createContext","useRealmApp","app","useContext","Error","RealmAppProvider","appId","children","useState","Realm","setApp","useEffect","currentUser","setCurrentUser","credentials","a","logIn","logOut","wrapped","Provider","value","Layout","styled","div","Card","props","Loading","size","margin","color","uiColors","gray","dark2","LoginScreen","mode","setMode","email","setEmail","password","setPassword","error","setError","isLoggingIn","setIsLoggingIn","handleLogin","e","emailPassword","handleAuthenticationError","handleRegistrationAndLogin","isValidEmailAddress","validator","isEmail","emailPasswordAuth","registerUser","err","Container","LoginFormRow","LoginHeading","type","label","placeholder","onChange","target","state","errorMessage","variant","onClick","ToggleContainer","ToggleText","ToggleLink","preventDefault","oldMode","parts","message","split","reason","length","trimStart","status","reasonRegex","match","groups","parseAuthenticationError","prevErr","LGCard","span","button","green","light2","h1","useTaskMutations","project","addTask","useAddTask","updateTask","useUpdateTask","deleteTask","useDeleteTask","AddTaskMutation","gql","UpdateTaskMutation","DeleteTaskMutation","TaskFieldsFragment","useMutation","update","cache","addedTask","data","modify","fields","tasks","existingTasks","writeFragment","fragment","addTaskMutation","task","variables","_id","ObjectId","_partition","partition","updateTaskMutation","updates","taskId","updatedTask","deleteTaskMutation","deletedTask","useTasks","useQuery","loading","useAllTasksInProject","StatusBadge","getColorForStatus","getTaskStatusDisplayName","nbsp","String","fromCharCode","TaskContent","TaskDescription","TaskName","name","ButtonGroup","css","direction","StatusChange","from","to","Button","LGButton","ButtonContent","TaskDetailModal","unselectTask","ChangeTaskStatusButton","fromStatus","toStatus","useChangeTaskStatusButton","open","Boolean","setOpen","fromstatus","EditPermissionsModal","isEditingPermissions","setIsEditingPermissions","teamMembers","setTeamMembers","newUserEmailError","setNewUserEmailError","functions","addTeamMember","removeTeamMember","getMyTeamMembers","updateTeamMembers","then","useTeamMembers","ContentContainer","ModalHeading","ModalText","AddTeamMemberInput","List","map","teamMember","ListItem","key","TeamMemberContainer","TeamMemberName","aria-label","className","inputValue","setInputValue","Row","InputContainer","aria-labelledby","disabled","result","styles","height","h2","p","ul","li","ProjectScreen","currentProject","TaskList","id","selectedTaskId","setSelectedTaskId","selectedTask","find","draftTask","setDraftTask","createDraftTask","deleteDraftTask","setDraftTaskName","submitDraftTask","useDraftTask","TaskListHeader","Sidebar","setCurrentProject","projects","customData","memberOf","useProjects","SidebarContainer","SectionHeading","SectionList","SectionListItem","isSelected","UserDetails","user","handleLogout","handleEditPermissions","light1","UserDetailsContainer","Username","profile","TextButton","TaskApp","gridAreaSidebar","gridAreaMain","createRealmApolloClient","link","HttpLink","uri","fetch","options","refreshCustomData","headers","Authorization","accessToken","InMemoryCache","ApolloClient","RealmApolloProvider","client","setClient","RequireLoggedInUser","App","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.4ef54e2f.chunk.js","sourcesContent":["import React from \"react\";\nimport * as Realm from \"realm-web\";\n\nconst RealmAppContext = React.createContext();\n\nexport const useRealmApp = () => {\n  const app = React.useContext(RealmAppContext);\n  if (!app) {\n    throw new Error(\n      `You must call useRealmApp() inside of a <RealmAppProvider />`\n    );\n  }\n  return app;\n};\n\nexport const RealmAppProvider = ({ appId, children }) => {\n  const [app, setApp] = React.useState(new Realm.App(appId));\n  React.useEffect(() => {\n    setApp(new Realm.App(appId));\n  }, [appId]);\n  // Wrap the Realm.App object's user state with React state\n  const [currentUser, setCurrentUser] = React.useState(app.currentUser);\n  async function logIn(credentials) {\n    await app.logIn(credentials);\n    // If successful, app.currentUser is the user that just logged in\n    setCurrentUser(app.currentUser);\n  }\n  async function logOut() {\n    // Log out the currently active user\n    await app.currentUser?.logOut();\n    // If another user was logged in too, they're now the current user.\n    // Otherwise, app.currentUser is null.\n    setCurrentUser(app.currentUser);\n  }\n  const wrapped = { ...app, currentUser, logIn, logOut };\n  return (\n    <RealmAppContext.Provider value={wrapped}>\n      {children}\n    </RealmAppContext.Provider>\n  );\n};\n","import React from \"react\";\nimport LGCard from \"@leafygreen-ui/card\";\nimport styled from \"@emotion/styled\";\n\nconst Layout = styled.div`\n  padding: 8px;\n  color: black;\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n`;\n\nexport default function Card({ children, ...props }) {\n  return (\n    <LGCard {...props}>\n      <Layout>{children}</Layout>\n    </LGCard>\n  );\n}\n","import React from \"react\";\nimport { uiColors } from \"@leafygreen-ui/palette\";\nimport GridLoader from \"react-spinners/GridLoader\";\n\nexport default function Loading() {\n  return <GridLoader size=\"15px\" margin=\"3px\" color={uiColors.gray.dark2} />;\n}\n","import React from \"react\";\nimport * as Realm from \"realm-web\";\nimport { useRealmApp } from \"../RealmApp\";\nimport styled from \"@emotion/styled\";\nimport Button from \"@leafygreen-ui/button\";\nimport TextInput from \"@leafygreen-ui/text-input\";\nimport LGCard from \"./Card\";\nimport { uiColors } from \"@leafygreen-ui/palette\";\nimport validator from \"validator\";\nimport Loading from \"./Loading\";\n\nexport default function LoginScreen() {\n  const app = useRealmApp();\n  // Toggle between logging users in and registering new users\n  const [mode, setMode] = React.useState(\"login\");\n  const toggleMode = () => {\n    setMode((oldMode) => (oldMode === \"login\" ? \"register\" : \"login\"));\n  };\n  // Keep track of form input state\n  const [email, setEmail] = React.useState(\"\");\n  const [password, setPassword] = React.useState(\"\");\n  // Keep track of input validation/errors\n  const [error, setError] = React.useState({});\n  // Whenever the mode changes, clear the form inputs\n  React.useEffect(() => {\n    setEmail(\"Enter Email Address\");\n    setPassword(\"password\");\n    setError({});\n  }, [mode]);\n\n  const [isLoggingIn, setIsLoggingIn] = React.useState(false);\n  const handleLogin = async () => {\n    setIsLoggingIn(true);\n    setError((e) => ({ ...e, password: null }));\n    try {\n      await app.logIn(Realm.Credentials.emailPassword(email, password));\n    } catch (err) {\n      handleAuthenticationError(err, setError);\n    }\n  };\n  \n\n  const handleRegistrationAndLogin = async () => {\n    const isValidEmailAddress = validator.isEmail(email);\n    setError((e) => ({ ...e, password: null }));\n    if (isValidEmailAddress) {\n      try {\n        // Register the user and, if successful, log them in\n        await app.emailPasswordAuth.registerUser(email, password);\n        return await handleLogin();\n      } catch (err) {\n        handleAuthenticationError(err, setError);\n      }\n    } else {\n      setError((err) => ({ ...err, email: \"Email is invalid.\" }));\n    }\n  };\n  \n\n  return (\n    <Container>\n      {isLoggingIn ? (\n        <Loading />\n      ) : (\n        <Card>\n          <LoginFormRow>\n            <LoginHeading>\n              {mode === \"login\" ? \"Log In\" : \"Register an Account\"}\n            </LoginHeading>\n          </LoginFormRow>\n          <LoginFormRow>\n            <TextInput\n              type=\"email\"\n              label=\"Email\"\n              placeholder=\"your.email@example.com\"\n              onChange={(e) => {\n                setError((e) => ({ ...e, email: null }));\n                setEmail(e.target.value);\n              }}\n              value={email}\n              state={\n                error.email\n                  ? \"error\"\n                  : validator.isEmail(email)\n                  ? \"valid\"\n                  : \"none\"\n              }\n              errorMessage={error.email}\n            />\n          </LoginFormRow>\n          <LoginFormRow>\n            <TextInput\n              type=\"password\"\n              label=\"Password\"\n              placeholder=\"pa55w0rd\"\n              onChange={(e) => {\n                setPassword(e.target.value);\n              }}\n              value={password}\n              state={\n                error.password ? \"error\" : error.password ? \"valid\" : \"none\"\n              }\n              errorMessage={error.password}\n            />\n          </LoginFormRow>\n          {mode === \"login\" ? (\n            <Button variant=\"primary\" onClick={() => handleLogin()}>\n              Log In\n            </Button>\n          ) : (\n            <Button\n              variant=\"primary\"\n              onClick={() => handleRegistrationAndLogin()}\n            >\n              Register\n            </Button>\n          )}\n          <ToggleContainer>\n            <ToggleText>\n              {mode === \"login\"\n                ? \"Don't have an account?\"\n                : \"Already have an account?\"}\n            </ToggleText>\n            <ToggleLink\n              onClick={(e) => {\n                e.preventDefault();\n                toggleMode();\n              }}\n            >\n              {mode === \"login\" ? \"Register one now.\" : \"Log in instead.\"}\n            </ToggleLink>\n          </ToggleContainer>\n        </Card>\n      )}\n    </Container>\n  );\n}\n\nfunction handleAuthenticationError(err, setError) {\n  const { status, message } = parseAuthenticationError(err);\n  const errorType = message || status;\n  switch (errorType) {\n    case \"invalid username\":\n      setError((prevErr) => ({ ...prevErr, email: \"Invalid email address.\" }));\n      break;\n    case \"invalid username/password\":\n    case \"invalid password\":\n    case \"401\":\n      setError((err) => ({ ...err, password: \"Incorrect password.\" }));\n      break;\n    case \"name already in use\":\n    case \"409\":\n      setError((err) => ({ ...err, email: \"Email is already registered.\" }));\n      break;\n    case \"password must be between 6 and 128 characters\":\n    case \"400\":\n      setError((err) => ({\n        ...err,\n        password: \"Password must be between 6 and 128 characters.\",\n      }));\n      break;\n    default:\n      break;\n  }\n}\n\nfunction parseAuthenticationError(err) {\n  const parts = err.message.split(\":\");\n  const reason = parts[parts.length - 1].trimStart();\n  if (!reason) return { status: \"\", message: \"\" };\n  const reasonRegex = /(?<message>.+)\\s\\(status (?<status>[0-9][0-9][0-9])/;\n  const match = reason.match(reasonRegex);\n  const { status, message } = match?.groups ?? {};\n  return { status, message };\n}\n\nconst Card = styled(LGCard)`\n  width: 420px;\n`;\nconst ToggleContainer = styled.div`\n  margin-top: 8px;\n  font-size: 12px;\n  display: flex;\n  justify-content: center;\n`;\n\nconst ToggleText = styled.span`\n  line-height: 18px;\n`;\n\nconst ToggleLink = styled.button`\n  background: none;\n  border: none;\n  font-size: 12px;\n  color: ${uiColors.green.dark2};\n`;\n\nconst Container = styled.div`\n  height: 100vh;\n  justify-content: center;\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  background: ${uiColors.gray.light2};\n`;\n\nconst LoginHeading = styled.h1`\n  margin: 0;\n  font-size: 32px;\n`;\n\nconst LoginFormRow = styled.div`\n  margin-bottom: 16px;\n`;\n","import { ObjectId } from \"bson\";\nimport { useMutation } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\n\nexport default function useTaskMutations(project) {\n  return {\n    addTask: useAddTask(project),\n    updateTask: useUpdateTask(project),\n    deleteTask: useDeleteTask(project),\n  };\n}\n\n// TODO: Add the GraphGL mutation for adding a task.\nconst AddTaskMutation = gql`\n  mutation AddTask($task: TaskInsertInput!) {\n    addedTask: insertOneTask(data: $task) {\n      _id\n      _partition\n      name\n      status\n    }\n  }\n`;\n\n// TODO: Add the GraphGL mutation for updating a task.\nconst UpdateTaskMutation = gql`\n  mutation UpdateTask($taskId: ObjectId!, $updates: TaskUpdateInput!) {\n    updatedTask: updateOneTask(query: { _id: $taskId }, set: $updates) {\n      _id\n      _partition\n      name\n      status\n    }\n  }\n`;\n\n// TODO: Add the GraphGL mutation for deleting a task.\nconst DeleteTaskMutation = gql`\n  mutation DeleteTask($taskId: ObjectId!) {\n    deletedTask: deleteOneTask(query: { _id: taskId }) {\n      _id\n      _partition\n      name\n      status\n    }\n  }\n`;\n\nconst TaskFieldsFragment = gql`\n  fragment TaskFields on Task {\n    _id\n    _partition\n    status\n    name\n  }\n`;\n\nfunction useAddTask(project) {\n  const [addTaskMutation] = useMutation(AddTaskMutation, {\n    // Manually save added Tasks into the Apollo cache so that Task queries automatically update\n    // For details, refer to https://www.apollographql.com/docs/react/data/mutations/#making-all-other-cache-updates\n    update: (cache, { data: { addedTask } }) => {\n      cache.modify({\n        fields: {\n          tasks: (existingTasks = []) => [\n            ...existingTasks,\n            cache.writeFragment({\n              data: addedTask,\n              fragment: TaskFieldsFragment,\n            }),\n          ],\n        },\n      });\n    },\n  });\n\n  const addTask = async (task) => {\n    const { addedTask } = await addTaskMutation({\n      variables: {\n        task: {\n          _id: new ObjectId(),\n          _partition: project.partition,\n          status: \"Open\",\n          ...task,\n        },\n      },\n    });\n    return addedTask;\n  };\n\n  return addTask;\n}\n\n\nfunction useUpdateTask(project) {\n  const [updateTaskMutation] = useMutation(UpdateTaskMutation);\n  const updateTask = async (task, updates) => {\n    const { updatedTask } = await updateTaskMutation({\n      variables: { taskId: task._id, updates },\n    });\n    return updatedTask;\n  };\n  return updateTask;\n}\n\n\nfunction useDeleteTask(project) {\n  const [deleteTaskMutation] = useMutation(DeleteTaskMutation);\n  const deleteTask = async (task) => {\n    const { deletedTask } = await deleteTaskMutation({\n      variables: { taskId: task._id },\n    });\n    return deletedTask;\n  };\n  return deleteTask;\n}\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport useTaskMutations from \"./useTaskMutations\";\n\nconst useTasks = (project) => {\n  const { tasks, loading } = useAllTasksInProject(project);\n  const { addTask, updateTask } = useTaskMutations(project);\n  const { deleteTask } = useTaskMutations(project);\n  return {\n    loading,\n    tasks,\n    updateTask,\n    addTask,\n    deleteTask\n  };\n};\nexport default useTasks;\n\nfunction useAllTasksInProject(project) {\n  const { data, loading, error } = useQuery(\n    gql`\n      query GetAllTasksForProject($partition: String!) {\n        tasks(query: { _partition: $partition }) {\n          _id\n          name\n          status\n        }\n      }\n    `,\n    { variables: { partition: project.partition } }\n  );\n  if (error) {\n    throw new Error(`Failed to fetch tasks: ${error.message}`);\n  }\n\n  // If the query has finished, return the tasks from the result data\n  // Otherwise, return an empty list\n  const tasks = data?.tasks ?? [];\n  return { tasks, loading };\n}\n","import React from \"react\";\nimport Badge from \"@leafygreen-ui/badge\";\n\nexport default function StatusBadge({ status }) {\n  return (\n    <Badge variant={getColorForStatus(status)}>\n      {getTaskStatusDisplayName(status)}\n    </Badge>\n  );\n}\n\nconst getColorForStatus = (status) => {\n  switch (status) {\n    case \"Open\":\n      return \"blue\";\n    case \"InProgress\":\n      return \"yellow\";\n    case \"Complete\":\n      return \"green\";\n    case \"Delete\":\n      return \"red\";\n    default:\n      return \"gray\";\n  }\n};\n\nconst getTaskStatusDisplayName = (status) => {\n  if (status === \"InProgress\") {\n    // Add a non-breaking space so that the string is always a single line\n    const nbsp = String.fromCharCode(160);\n    return `In${nbsp}Progress`;\n  }\n  return status;\n};\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport StatusBadge from \"./StatusBadge\";\n\nexport default function TaskContent({ task }) {\n  return (\n    <TaskDescription>\n      <TaskName>{task.name}</TaskName>\n      <StatusBadge status={task.status} />\n    </TaskDescription>\n  );\n}\n\nconst TaskDescription = styled.div`\n  display: flex;\n  width: 100%;\n`;\nconst TaskName = styled.span`\n  flex-grow: 1;\n`;\n","import styled from \"@emotion/styled\";\nimport { css } from \"@emotion/core\";\n\nconst ButtonGroup = styled.div(\n  (props) => css`\n    display: flex;\n    flex-direction: ${props.direction === \"row\" ? \"row\" : \"column\"};\n    justify-content: center;\n    gap: 8px;\n    margin-top: 8px;\n  `\n);\nexport default ButtonGroup;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport StatusBadge from \"./StatusBadge\";\nimport ArrowRightIcon from \"@leafygreen-ui/icon/dist/ArrowRight\";\n\nexport default function StatusChange({ from, to }) {\n  return (\n    <Container>\n      <StatusBadge status={from} />\n      <ArrowRightIcon />\n      <StatusBadge status={to} />\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport LGButton from \"@leafygreen-ui/button\";\nimport StatusChange from \"./StatusChange\";\nimport useTaskMutations from \"../graphql/useTaskMutations\";\n\n// Use a hook to dynamically create status update buttons for the specified project\nexport default function useChangeTaskStatusButton(project) {\n  const { updateTask } = useTaskMutations(project);\n  const ChangeTaskStatusButton = ({ task, fromStatus, toStatus, children }) => {\n    return (\n      <Button onClick={() => updateTask(task, { status: toStatus })}>\n        <ButtonContent>\n          {children}\n          <StatusChange from={fromStatus} to={toStatus} />\n        </ButtonContent>\n      </Button>\n    );\n  };\n  return ChangeTaskStatusButton;\n}\n\nconst Button = styled(LGButton)`\n  height: 100%;\n`;\n\nconst ButtonContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 8px 0;\n  gap: 8px;\n`;\n","import React from \"react\";\nimport TaskContent from \"./TaskContent\";\nimport Modal from \"@leafygreen-ui/modal\";\nimport ButtonGroup from \"./ButtonGroup\";\nimport useChangeTaskStatusButton from \"./useChangeTaskStatusButton\";\n\nexport default function TaskDetailModal({ project, task, unselectTask }) {\n  const ChangeTaskStatusButton = useChangeTaskStatusButton(project);\n  return (\n    <Modal\n      open={Boolean(task)} // Show the modal if we passed a Task into the task prop.\n      setOpen={unselectTask} // When the user tries to close the modal, unset the Task to stop showing the modal\n    >\n      {task && (\n        <>\n          <TaskContent task={task} />\n          <ButtonGroup direction=\"row\">\n            {task.status === \"Open\" && (\n              <ChangeTaskStatusButton\n                task={task}\n                fromStatus=\"Open\"\n                toStatus=\"InProgress\"\n              >\n                Start Progress\n              </ChangeTaskStatusButton>\n            )}\n            {task.status === \"InProgress\" && (\n              <>\n                <ChangeTaskStatusButton\n                  task={task}\n                  fromStatus=\"InProgress\"\n                  toStatus=\"Open\"\n                >\n                  Stop Progress\n                </ChangeTaskStatusButton>\n                <ChangeTaskStatusButton\n                  task={task}\n                  fromStatus=\"InProgress\"\n                  toStatus=\"Complete\"\n                >\n                  Complete Task\n                </ChangeTaskStatusButton>\n              </>\n            )}\n            {task.status === \"Complete\" && (\n              <ChangeTaskStatusButton\n                task={task}\n                fromStatus=\"Complete\"\n                toStatus=\"InProgress\"\n              >\n                Resume Task\n              </ChangeTaskStatusButton>\n            )}\n            {task.status === \"Delete\" && (\n              <ChangeTaskStatusButton\n              task={task}\n              fromstatus=\"Any\"\n              toStatus=\"Deleted\"\n              >\n                Delete Task \n              </ChangeTaskStatusButton>\n            )}\n          </ButtonGroup>\n        </>\n      )}\n    </Modal>\n  );\n}\n","import React from \"react\";\nimport { css } from \"@emotion/core\";\nimport styled from \"@emotion/styled\";\n\nimport LGButton from \"@leafygreen-ui/button\";\nimport Modal from \"@leafygreen-ui/modal\";\nimport XIcon from \"@leafygreen-ui/icon/dist/X\";\nimport PlusIcon from \"@leafygreen-ui/icon/dist/Plus\";\nimport IconButton from \"@leafygreen-ui/icon-button\";\nimport TextInput from \"@leafygreen-ui/text-input\";\nimport { uiColors } from \"@leafygreen-ui/palette\";\nimport { useRealmApp } from \"../RealmApp\";\n\nfunction useTeamMembers() {\n  const [teamMembers, setTeamMembers] = React.useState(null);\n  const [newUserEmailError, setNewUserEmailError] = React.useState(null);\n  const app = useRealmApp();\n  const { addTeamMember, removeTeamMember, getMyTeamMembers } = app.currentUser.functions;\n  const updateTeamMembers = () => {\n    getMyTeamMembers().then(setTeamMembers);\n  };\n  // display team members on load\n  React.useEffect(updateTeamMembers, []);\n  return {\n    teamMembers,\n    errorMessage: newUserEmailError,\n    addTeamMember: async (email) => {\n      const { error } = await addTeamMember(email);\n      if (error) {\n        setNewUserEmailError(error);\n        return { error };\n      } else {\n        updateTeamMembers();\n      }\n    },\n    removeTeamMember: async (email) => {\n      await removeTeamMember(email);\n      updateTeamMembers();\n    },\n  };\n}\n\n\nexport default function EditPermissionsModal({\n  isEditingPermissions,\n  setIsEditingPermissions,\n}) {\n  const {\n    teamMembers,\n    errorMessage,\n    addTeamMember,\n    removeTeamMember,\n  } = useTeamMembers();\n  return (\n    <Modal\n      open={isEditingPermissions}\n      setOpen={setIsEditingPermissions}\n      size=\"small\"\n    >\n      <ContentContainer>\n        <ModalHeading>Team Members</ModalHeading>\n        <ModalText>\n          These users can add, read, modify, and delete tasks in your project\n        </ModalText>\n        <ModalText>Add a new user by email:</ModalText>\n        <AddTeamMemberInput\n          addTeamMember={addTeamMember}\n          errorMessage={errorMessage}\n        />\n        <List>\n          {teamMembers?.length ? (\n            teamMembers.map((teamMember) => {\n              return (\n                <ListItem key={teamMember._id}>\n                  <TeamMemberContainer>\n                    <TeamMemberName>{teamMember.name}</TeamMemberName>\n                    <IconButton\n                      aria-label=\"remove-team-member-button\"\n                      className=\"remove-team-member-button\"\n                      onClick={async () => {\n                        await removeTeamMember(teamMember.name);\n                      }}\n                    >\n                      <XIcon />\n                    </IconButton>\n                  </TeamMemberContainer>\n                </ListItem>\n              );\n            })\n          ) : (\n            <ModalText>No team members</ModalText>\n          )}\n        </List>\n      </ContentContainer>\n    </Modal>\n  );\n}\n\nfunction AddTeamMemberInput({ addTeamMember, errorMessage }) {\n  const [inputValue, setInputValue] = React.useState(\"\");\n  return (\n    <Row>\n      <InputContainer>\n        <TextInput\n          type=\"email\"\n          aria-labelledby=\"team member email address\"\n          placeholder=\"some.email@example.com\"\n          state={errorMessage ? \"error\" : \"none\"}\n          errorMessage={errorMessage ?? \"Foo\"}\n          onChange={(e) => {\n            setInputValue(e.target.value);\n          }}\n          value={inputValue}\n        />\n      </InputContainer>\n      <Button\n        disabled={!inputValue}\n        onClick={async () => {\n          const result = await addTeamMember(inputValue);\n          if (!result?.error) {\n            setInputValue(\"\");\n          }\n        }}\n        styles={{ height: \"36px\" }}\n      >\n        <PlusIcon />\n        Add User\n      </Button>\n    </Row>\n  );\n}\n\nconst Button = styled(LGButton)`\n  height: 36px;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  align-items: end;\n`;\nconst InputContainer = styled.div`\n  flex-grow: 1;\n`;\nconst ModalHeading = styled.h2`\n  margin: 0;\n  font-size: 24px;\n`;\nconst ModalText = styled.p`\n  margin: 8px 2px;\n`;\n\nconst ContentContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst List = styled.ul`\n  list-style: none;\n  padding: 8px 0;\n  margin: 0;\n`;\nconst ListItem = styled.li(\n  (props) => css`\n    padding: 8px 12px;\n    border-radius: 8px;\n    :hover {\n      background: ${uiColors.gray.light2};\n    }\n  `\n);\nconst TeamMemberContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\nconst TeamMemberName = styled.div`\n  flex-grow: 1;\n  padding: 8px 0;\n`;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport useTasks from \"../graphql/useTasks\";\nimport TaskContent from \"./TaskContent\";\nimport TaskDetailModal from \"./TaskDetailModal\";\nimport EditPermissionsModal from \"./EditPermissionsModal\";\nimport Card from \"./Card\";\nimport Button from \"@leafygreen-ui/button\";\nimport ButtonGroup from \"./ButtonGroup\";\nimport TextInput from \"@leafygreen-ui/text-input\";\nimport { uiColors } from \"@leafygreen-ui/palette\";\n\nimport Loading from \"./Loading\";\n\nexport default function ProjectScreen({\n  currentProject,\n  isEditingPermissions,\n  setIsEditingPermissions,\n}) {\n  return (\n    <Container>\n      {currentProject && <TaskList currentProject={currentProject} />}\n      <EditPermissionsModal\n        isEditingPermissions={isEditingPermissions}\n        setIsEditingPermissions={setIsEditingPermissions}\n      />\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  height: 100vh;\n  justify-content: center;\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  grid-area: main;\n  background: ${uiColors.gray.light2};\n`;\n\nfunction useDraftTask({ addTask }) {\n  const [draftTask, setDraftTask] = React.useState(null);\n  const createDraftTask = () => {\n    setDraftTask({ name: \"\" });\n  };\n  const deleteDraftTask = () => {\n    setDraftTask(null);\n  };\n  const setDraftTaskName = (name) => {\n    setDraftTask({ name });\n  };\n  const submitDraftTask = async () => {\n    await addTask(draftTask);\n    setDraftTask(null);\n  };\n  return {\n    draftTask,\n    createDraftTask,\n    deleteDraftTask,\n    setDraftTaskName,\n    submitDraftTask,\n  };\n}\n\nfunction TaskList({ currentProject }) {\n  const { tasks, addTask, loading } = useTasks(currentProject);\n  const getTaskById = (id) => tasks.find((task) => task._id === id);\n  const [selectedTaskId, setSelectedTaskId] = React.useState(null);\n  const selectedTask = getTaskById(selectedTaskId);\n\n  const {\n    draftTask,\n    createDraftTask,\n    deleteDraftTask,\n    setDraftTaskName,\n    submitDraftTask,\n  } = useDraftTask({ addTask });\n\n  return loading ? (\n    <Loading />\n  ) : (\n    <>\n      <List>\n        {tasks.length === 0 ? (\n          <TaskListHeader>\n            <h1>No Tasks</h1>\n            <p>Click the button below to add a task to this project</p>\n          </TaskListHeader>\n        ) : (\n          tasks.map((task) => (\n            <ListItem key={task._id}>\n              <Card onClick={() => setSelectedTaskId(task._id)}>\n                <TaskContent task={task} />\n              </Card>\n            </ListItem>\n          ))\n        )}\n        {draftTask ? (\n          <ListItem>\n            <Card>\n              <TextInput\n                type=\"text\"\n                aria-labelledby=\"task description\"\n                placeholder=\"Do the dishes\"\n                onChange={(e) => {\n                  setDraftTaskName(e.target.value);\n                }}\n                value={draftTask.name}\n              />\n              <ButtonGroup>\n                <Button\n                  variant=\"primary\"\n                  disabled={!draftTask.name}\n                  onClick={() => {\n                    submitDraftTask();\n                  }}\n                >\n                  Add\n                </Button>\n                <Button\n                  variant=\"danger\"\n                  onClick={() => {\n                    deleteDraftTask();\n                  }}\n                >\n                  Cancel\n                </Button>\n              </ButtonGroup>\n            </Card>\n          </ListItem>\n        ) : (\n          <ListItem>\n            <Card>\n              <Button onClick={() => createDraftTask()}>Add Task</Button>\n            </Card>\n          </ListItem>\n        )}\n      </List>\n      <TaskDetailModal\n        project={currentProject}\n        task={selectedTask}\n        unselectTask={setSelectedTaskId}\n      />\n    </>\n  );\n}\n\nconst List = styled.ul`\n  list-style-type: none;\n  padding-left: 0;\n  width: 400px;\n`;\nconst ListItem = styled.li`\n  :not(:first-of-type) {\n    margin-top: 8px;\n  }\n`;\n\nconst TaskListHeader = styled.div`\n  line-height: 24px;\n  letter-spacing: 0px;\n  text-align: center;\n  font-size: 16px;\n`;\n","import React from \"react\";\nimport { css } from \"@emotion/core\";\nimport styled from \"@emotion/styled\";\nimport { useRealmApp } from \"../RealmApp\";\nimport useProjects from \"../graphql/useProjects\";\nimport Card from \"./Card\";\nimport { uiColors } from \"@leafygreen-ui/palette\";\n\nexport default function Sidebar({\n  currentProject,\n  setCurrentProject,\n  setIsEditingPermissions,\n}) {\n  const projects = useProjects();\n  const app = useRealmApp();\n\n  return (\n    <SidebarContainer>\n      <Card>\n        <SectionHeading>IntraSeam Projects</SectionHeading>\n        <SectionList>\n          {projects.map((project) => (\n            <SectionListItem\n              key={project.partition}\n              onClick={() => setCurrentProject(project)}\n              isSelected={project.partition === currentProject?.partition}\n            >\n              {project.name}\n            </SectionListItem>\n          ))}\n        </SectionList>\n        <UserDetails\n          user={app.currentUser}\n          handleLogout={() => {\n            app.logOut();\n          }}\n          handleEditPermissions={() => {\n            setIsEditingPermissions(true);\n          }}\n        />\n      </Card>\n    </SidebarContainer>\n  );\n}\n\nconst SidebarContainer = styled.div`\n  display: flex;\n  background: ${uiColors.gray.light2};\n  flex-direction: column;\n  padding: 40px;\n`;\n\nconst SectionHeading = styled.h2`\n  margin: 0;\n  padding: 8px;\n`;\nconst SectionList = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin: 0;\n`;\nconst SectionListItem = styled.li(\n  (props) => css`\n    padding: 8px 12px;\n    border-radius: 8px;\n    background: ${props.isSelected && uiColors.green.light2};\n    :hover {\n      background: ${!props.isSelected && uiColors.gray.light1};\n    }\n  `\n);\n\nfunction UserDetails({ user, handleLogout, handleEditPermissions }) {\n  return (\n    <UserDetailsContainer>\n      <Username>{user.profile.email}</Username>\n      <TextButton onClick={handleEditPermissions}>Manage My Project</TextButton>\n      <TextButton onClick={handleLogout}>Log Out</TextButton>\n    </UserDetailsContainer>\n  );\n}\n\nconst UserDetailsContainer = styled.div`\n  padding: 8px 0;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Username = styled.div`\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 4px;\n`;\n\nconst TextButton = styled.button`\n  background: none;\n  border: none;\n  padding: 4px;\n  color: #069;\n  text-decoration: none;\n  cursor: pointer;\n  color: ${uiColors.green.dark2};\n`;\n","import { useRealmApp } from \"../RealmApp\";\n\nexport default function useProjects() {\n  const app = useRealmApp();\n  if (!app.currentUser) {\n    throw new Error(\"Cannot list projects if there is no logged in user.\");\n  }\n  const projects = app.currentUser.customData.memberOf;\n  return projects;\n}\n","import React from \"react\";\nimport { css } from \"@emotion/core\";\nimport styled from \"@emotion/styled\";\nimport { useRealmApp } from \"./RealmApp\";\nimport ProjectScreen from \"./components/ProjectScreen\";\nimport Sidebar from \"./components/Sidebar\";\n\nexport default function TaskApp() {\n  const app = useRealmApp();\n  const [currentProject, setCurrentProject] = React.useState(\n    // set the current project as  \"My Project\"\n    app.currentUser.customData.memberOf[0]\n  );\n  const [isEditingPermissions, setIsEditingPermissions] = React.useState(false);\n  return (\n    <Container>\n      <Sidebar\n        css={gridAreaSidebar}\n        currentProject={currentProject}\n        setCurrentProject={setCurrentProject}\n        setIsEditingPermissions={setIsEditingPermissions}\n      ></Sidebar>\n      <ProjectScreen\n        css={gridAreaMain}\n        currentProject={currentProject}\n        isEditingPermissions={isEditingPermissions}\n        setIsEditingPermissions={setIsEditingPermissions}\n      />\n    </Container>\n  );\n}\n\nconst sidebarWidth = \"420px\";\nconst Container = styled.div`\n  box-sizing: border-box;\n  height: 100vh;\n  width: 100vh;\n  display: grid;\n  grid-template-columns: ${sidebarWidth} calc(100vw - ${sidebarWidth});\n  grid-template-rows: 1fr;\n  grid-template-areas: \"sidebar main\";\n`;\n\nconst gridAreaSidebar = css`\n  grid-area: sidebar;\n`;\nconst gridAreaMain = css`\n  grid-area: sidebar;\n`;\n","import React from \"react\";\nimport { useRealmApp } from \"../RealmApp\";\nimport {\n  ApolloClient,\n  HttpLink,\n  InMemoryCache,\n  ApolloProvider,\n} from \"@apollo/client\";\n\n// Create an ApolloClient that connects to the provided Realm.App's GraphQL API\nconst createRealmApolloClient = (app) => {\n  const link = new HttpLink({\n    // Realm apps use a standard GraphQL endpoint, identified by their App ID\n    uri: `https://realm.mongodb.com/api/client/v2.0/app/${app.id}/graphql`,\n    // A custom fetch handler adds the logged in user's access token to GraphQL requests\n    fetch: async (uri, options) => {\n      if (!app.currentUser) {\n        throw new Error(`Must be logged in to use the GraphQL API`);\n      }\n      // Refreshing a user's custom data also refreshes their access token\n      await app.currentUser.refreshCustomData();\n      // The handler adds a bearer token Authorization header to the otherwise unchanged request\n      options.headers.Authorization = `Bearer ${app.currentUser.accessToken}`;\n      return fetch(uri, options);\n    },\n  });\n  const cache = new InMemoryCache();\n  return new ApolloClient({ link, cache });\n};\n\nexport default function RealmApolloProvider({ children }) {\n  const app = useRealmApp();\n  const [client, setClient] = React.useState(createRealmApolloClient(app));\n  React.useEffect(() => {\n    setClient(createRealmApolloClient(app));\n  }, [app]);\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\n}\n","import React from \"react\";\nimport LoginScreen from \"./components/LoginScreen\";\nimport TaskApp from \"./TaskApp\";\nimport RealmApolloProvider from \"./graphql/RealmApolloProvider\";\nimport { useRealmApp, RealmAppProvider } from \"./RealmApp\";\n\nexport const APP_ID = \"tasktracker-bwgcx\";\n\nconst RequireLoggedInUser = ({ children }) => {\n  // Only render children if there is a logged in user.\n  const app = useRealmApp();\n  return app.currentUser ? children : <LoginScreen />;\n};\n\nexport default function App() {\n  return (\n    <RealmAppProvider appId={APP_ID}>\n      <RequireLoggedInUser>\n        <RealmApolloProvider>\n          <TaskApp />\n        </RealmApolloProvider>\n      </RequireLoggedInUser>\n    </RealmAppProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}